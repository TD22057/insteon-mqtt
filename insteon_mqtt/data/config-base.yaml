#==========================================================================
#
# Insteon <-> MQTT bridge base configuration file.
#
# DO NOT EDIT THIS FILE!!
#
# This is the base configuration file.  This file may be replaced or altered
# during an upgrade.
#
# To change the settings in the file, use a user config file.  Any settings
# in that file will overwrite the settings here.
#
#==========================================================================

#==========================================================================
#
# Optional logging configuration (can also be set via the command line)
#
#==========================================================================
logging:
  # 5=VERBOSE, 10=DEBUG, 20=INFO, 30=WARNING, 40=ERROR
  # VERBOSE only adds logging of MQTT ping requests to DEBUG
  level: 40

  # Print messages to the screen.
  #screen: False

  # Print messages to a file.
  #file: /var/log/insteon_mqtt.log

#==========================================================================
#
# Insteon configuration
#
#==========================================================================
insteon:
  ###### Modem
  # You can use either a PLM Modem or an Insteon Hub, but not both.

  # PLM Modem option (Serial or USB)
  #port: '/dev/insteon'
  #baudrate: 19200

  # Insteon Hub option
  # See https://github.com/TD22057/insteon-mqtt/blob/master/docs/hub.md
  # for a discussion of the details of using a Hub as your modem.
  # If set to true, will use the Hub settings below and ignore the Serial
  # settings above
  use_hub: False
  #hub_ip: 192.168.1.1
  #hub_port: 25105
  #hub_user: username  # Can be found on the underside of your hub
  #hub_password: password  # Can be found on the underside of your hub

  ######

  # modem Insteon hex address
  # You do not need to specify this.  If it is defined, this address will be
  # used even if it does not match what the modem reports.
  # address: 44.85.11

  # Device database file storage location.
  #storage: '/var/lib/insteon-mqtt'
  storage: 'data'

  # Automatically refresh device states and databases (if needed) at
  # startup.  This may be slow depending on the number of devices.
  startup_refresh: False

  # Path to Scenes Definition file (Optional)
  # The path can be specified either as an absolute path or as a relative path
  # using the !rel_path directive.  Where the path is relative to the
  # config.yaml location
  #
  #scenes: /home/user/insteon_mqtt/scenes.yaml
  #scenes: !rel_path scenes.yaml

  #------------------------------------------------------------------------
  # Devices require the Insteon hex address and an optional name. Note
  # that MQTT address topics are always the lower case hex address or
  # the input name depending on how they are configured below.
  devices:
    # On/off switch devices (outlets, wall switches, appliance modules, etc).
    switch: []

    # Dimming devices (outlets, wall switches, lamp modules, etc).
    dimmer: []

    # Battery powered sensors (door, window).
    battery_sensor: []

    # Battery powered hidden door sensors
    hidden_door: []

    # Battery powered motion sensors.
    motion: []

    # Battery powered mini remotes.
    mini_remote1: []  # Single Button Remotes


    mini_remote4: []  # Remotes with 4 Buttons

    mini_remote8: []  # Remotes with 8 Buttons

    # Smoke bridge module.
    smoke_bridge: []

    # FanLinc fan controller (dimmer+fan).
    fan_linc: []

    # KeypadLinc dimmers (dimmer+scene controller).
    keypad_linc: []

    # KeypadLinc switches (on/off+scene controller).
    keypad_linc_sw: []

    # Leak sensors.
    leak: []

    # IOLinc relay controllers
    io_linc: []

    # On/off outlets
    outlet: []

    # Thermostatus
    thermostat: []

    # EZIO4O 4 output relay modules
    ezio4o: []

#==========================================================================
#
# MQTT configuration
#
#==========================================================================
mqtt:
  #broker: 127.0.0.1
  port: 1883
  # Optional broker login data.
  #username:
  #password:
  # Optional broker client ID string (default is 'insteon-mqtt')
  #id:

  # Keep alive time in seconds.  This should be smaller than the
  # server setting (which is usually ~60 seconds) to insure that
  # connections aren't dropped.
  keep_alive: 30

  # Outbound messages configuration.  Retain should generally be 1
  # so that the current state is available when someone subscribes.
  qos: 1
  retain: 1

  encryption:
    # Encryption Options for encrypted broker connections
    # These settings will be passed to the `tls_set()` method.  Please refer
    # to the Paho client documentation for details:
    # https://eclipse.org/paho/clients/python/docs/

    # A string path to the Certificate Authority certificate files that are to
    # be treated as trusted by this client.
    # A Certificate Authority cert is REQUIRED for any encrypted connection.
    # an encrypted connection will not be attempted unless this is specified.
    # ca_cert:

    # Client certificate and private key - Optional
    # Used for TLS authentication of the client.
    # Strings pointing to the PEM encoded client certificate and private keys.
    # These CANNOT be encrypted with a password.
    # certfile:
    # keyfile:

    # The following generally do not need to be specified

    # Specifies the version of the SSL/TLS protocol to be used.
    # Can be: tls, tlsv1, tlsv11, tlsv12, sslv2, sslv23, sslv3
    tls_version: tls

    # A string that defines the certificate requirements that the client
    # imposes on the broker. Can be 'none', 'required'
    # none means just about any cert is accepted. Validation errors, such as
    # untrusted or expired cert, are ignored and do not abort the TLS/SSL
    # handshake.
    cert_reqs: required

    # A string specifying which encryption ciphers are allowable for this
    # connection.  This is a very advanced setting!!
    # ciphers:

  # Availability topic.  A payload of `online` is published when the MQTT
  # connection is established and a payload of `offline` is published when
  # the MQTT connection is terminated or times out.  Can be used to
  # determine if InsteonMQTT is running.
  availability_topic: 'insteon/availability'

  # Input commands topic to allow changes to a device.  See the device
  # documentation for details.  NOTE: This is usually not needed for
  # home automation - it's used by the command line tool to modify the
  # Insteon devices, network, and scenes.  The address or name of the
  # device will follow the command topic (insteon/command/aa.bb.cc) to
  # send these low level commands.
  cmd_topic: 'insteon/command'

  ### Discovery Settings
  #
  # Home Assistant implements mqtt device discovery as outlined at:
  # https://www.home-assistant.io/docs/mqtt/discovery
  # if discover_topic_base is defined, devices (as defined in config.yaml)
  # announce themselves to Home Assistant. Announcing occurs once
  # upon startup of insteon-mqtt and whenever HomeAssistant restart.
  #
  # The details of discovery_entities and how to define your own discovery
  # templates can be found here:
  # https://github.com/TD22057/insteon-mqtt/blob/master/docs/discovery.md
  #
  # Any additional variables that a specific device may offer are documented
  # in the comments below under that device class.
  #
  # TO ENABLE THE DISCOVERY PLATFORM: Set the following to true
  enable_discovery: false

  # This defines the base topic for publishing discovery messages, likely
  # does not need to be changed unless you changed your setting in
  # HomeAssistant
  discovery_topic_base: 'homeassistant'

  # The mqtt topic to monitor for HomeAssistant status.  This likely doesn't
  # need to be changed unless you have altered it.  When the message 'online'
  # is received on this topic, InsteonMQTT will publish the discovery
  # entities.  See https://www.home-assistant.io/docs/mqtt/birth_will/
  discovery_ha_status: 'homeassistant/status'

  # This is a variable that is available for use in all templates, as
  # {{device_info_template}}.  It is envisioned that it would be used to set
  # the device map information, see e.g.
  # https://www.home-assistant.io/integrations/switch.mqtt/#device
  # While the identifiers or (ids) section is listed as optional, it has been
  # my experience that it is required.
  # This device section describes the parent device that all sub-entities are
  # grouped under
  device_info_template:
    ids: "{{address}}"
    mf: "Insteon"
    mdl: "{%- if model_number != 'Unknown' -%}
            {{model_number}} - {{model_description}}
          {%- elif dev_cat_name != 'Unknown' -%}
            {{dev_cat_name}} - 0x{{'%0x' % sub_cat|int }}
          {%- elif dev_cat == 0 and sub_cat == 0 -%}
            No Info
          {%- else -%}
            0x{{'%0x' % dev_cat|int }} - 0x{{'%0x' % sub_cat|int }}
          {%- endif -%}"
    sw: "0x{{'%0x' % firmware|int }} - {{engine}}"
    name: "{{name_user_case}}"
    via_device: "{{modem_addr}}"

  modem:
    # Trigger modem virtual scenes.  Modem scenes are where the modem is a
    # controller and emits a scene broadcast with the specified group number.
    # There is no state topic since the scene doesn't have an on/off state.

    # The output of passing the payload through the template must match the
    # following where group is in the range 1-255 and NAME is a string name
    # defined in a scenes.yaml file.  Either GROUP or NAME must be specified.
    #   { "cmd" : 'on'/'off', ["group" : GROUP, "name": NAME] }
    # Available variables for templating are:
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    scene_topic: 'insteon/modem/scene'
    scene_payload: '{ "cmd" : "{{json.state.lower()}}",
                      "group" : {{json.group}}
                    }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    #
    # The modem has 253 possible scenes from scene 2-254.  The modem ONLY
    # ACCEPTS A SINGLE entity template.  This template will be used for each of
    # the scenes.
    #
    # This is the only place where you can set the template for the modem, it
    # does NOT use the `discovery_class` extra configuration setting.
    #
    # Special variables:
    #  {{scene}} - will be replaced with the scene number of the scene.
    #  {{scene_name}} - will be replaced with the name of the scene as defined
    #                   in a scenes.yaml file if used.
    #  {{scene_topic}} - is the modem scene topic
    #
    # Only scenes that appear in the GroupMap list when printing the modem db
    # will be included.  These are the only scenes for which the modem is
    # listed as a controller.  Run `refresh modem` if the entities list
    # appears incomplete to you.
    discovery_entities:
      scene:
        component: 'switch'
        config:
          uniq_id: "{{address}}_{{scene}}"
          name: "{%- if scene_name != '' -%}
                    {{scene_name}}
                  {%- else -%}
                    Modem Scene {{scene}}
                  {%- endif -%}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{scene_topic}}"
          device: "{{device_info}}"
          payload_on: "{\"state\": \"on\", \"group\": \"{{scene}}\"}"
          payload_off: "{\"state\": \"off\", \"group\": \"{{scene}}\"}"

  switch:
    #------------------------------------------------------------------------
    # On/off switches
    #------------------------------------------------------------------------

    # On/Off switch.  Non-dimming lamp modules and wall switches.

    # Output state change topic and template.  This message is sent whenever
    # the device state changes for any reason.  Available variables for
    # templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   mode = 'normal'/'fast'/'instant'
    #   fast = 0/1
    #   instant = 0/1
    #   reason = 'device'/'scene'/'command'/'refresh'/'...'
    state_topic: 'insteon/{{address}}/state'
    state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Manual mode (holding down a button) is triggered once when the button
    # is held and once when it's released.  Available variables for
    # templating are address (see above), name (see above), and:
    #   manual_str = 'up'/'off'/'down'
    #   manual = 1/0/-1
    #   manual_openhab = 2/1/0
    #manual_state_topic: 'insteon/{{address}}/manual_state'
    #manual_state_payload: '{{manual_str.upper()}}'

    # Input on/off command.  Similar functionality to the cmd_topic but only
    # for turning the device on and off.  If reason is input, is will be
    # passed through to the state_payload.  The output of passing the payload
    # through the template must match the following:
    #   { "cmd" : 'on'/'off', ["mode" : 'normal'/'fast'/'instant'],
    #             ["fast" : 1/0], ["instant" : 1/0], ["reason" : "..."] }
    # Available variables for templating are:
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    on_off_topic: 'insteon/{{address}}/set'
    on_off_payload: >
      { "cmd" : {%- if json is defined and json -%}
                  "{{json.state.lower()}}"
                {%- else -%}
                  "{{value.lower()}}"
                {%- endif -%}}

    # Scene on/off command.  This triggers the scene broadcast on the switch
    # in the same way clicking the button would.  The inputs are the same as
    # those for the on_off topic and payload.
    scene_topic: 'insteon/{{address}}/scene'
    scene_payload: '{ "cmd" : "{{json.state.lower()}}"
                      {% if json.brightness is defined %}
                          , "level" : {{json.brightness}}
                      {% endif %}
                    }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      switch:
        component: 'switch'
        config:
          uniq_id: "{{address}}_switch"
          name: ""
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic}}"
          stat_t: "{{state_topic}}"
          device: "{{device_info}}"
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"

  dimmer:
    #------------------------------------------------------------------------
    # Dimmers
    #------------------------------------------------------------------------

    # Dimmer switch.  Dimming lamp modules and wall switches.

    # Output state change topic and payload.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   level_255 = 0-255
    #   level_100 = 0-100
    #   mode = 'normal'/'fast'/'instant'
    #   fast = 0/1
    #   instant = 0/1
    #   reason = 'device'/'scene'/'command'/'refresh'/'...'
    state_topic: 'insteon/{{address}}/state'
    state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "brightness" : {{level_255}},
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Manual mode (holding down a button) is triggered once when the button
    # is held and once when it's released.  Available variables for
    # templating are address (see above), name (see above), and:
    #   manual_str = 'up'/'off'/'down'
    #   manual = 1/0/-1
    #   manual_openhab = 2/1/0
    #manual_state_topic: 'insteon/{{address}}/manual_state'
    #manual_state_payload: '{{manual_str.upper()}}'

    # Input on/off command.  Similar functionality to the cmd_topic but only
    # for turning the device on and off.  If reason is input, is will be
    # passed through to the state_payload.  The output of passing the payload
    # through the template must match the following:
    #   { "cmd" : "on"/"off", ["mode" : 'normal'/'fast'/'instant'],
    #             ["fast" : 1/0], ["instant" : 1/0], ["reason" : "..."] }
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    # NOTE: this isn't used by the default HA setup - it's only useful when
    # treating the dimmer as an on/off switch and sending ON/OFF payloads
    on_off_topic: 'insteon/{{address}}/set'
    on_off_payload: '{ "cmd" : "{{value.lower()}}" }'

    # Input dimming on/off command.  Similar functionality to the cmd_topic
    # but only for turning the device on and off and setting the level.  If
    # reason is input, is will be passed through to the state_payload.  The
    # output of passing the payload through the template must match the
    # following:
    #   { "cmd" : "on"/"off", ["level" : LEVEL],
    #                         ["mode" : 'normal'/'fast'/'instant'],
    #                         ["fast" : 1/0], ["instant" : 1/0],
    #                         ["reason" : "..."] }
    # where:
    #   LEVEL = 0->255 dimmer level
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    level_topic: 'insteon/{{address}}/level'
    # NOTE: HASS JSON switch doesn't send brightness in some cases
    # when actuated so handle that here in the template code.  The
    # other HASS MQTT options also have this problem.
    # This example will use device's configured default on-level if brightness
    # is not specified.  To use full-brightness instead, add the following to
    # the json.brightness check below:
    #    {% else %}
    #        , "level" : 255
    level_payload: >
       { "cmd" : "{{json.state.lower()}}"
         {% if json.brightness is defined %}
             , "level" : {{json.brightness}}
         {% endif %} }

    # Scene on/off command.  This triggers the scene broadcast on the switch
    # in the same way clicking the button would.  The inputs are the same as
    # those for the on_off topic and payload.
    scene_topic: 'insteon/{{address}}/scene'
    scene_payload: '{ "cmd" : "{{json.state.lower()}}"
                      {% if json.brightness is defined %}
                          , "level" : {{json.brightness}}
                      {% endif %}
                    }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      dimmer:
        component: 'light'
        config:
          uniq_id: "{{address}}_light"
          name: ""
          avty_t: "{{availability_topic}}"
          cmd_t: "{{level_topic}}"
          stat_t: "{{state_topic}}"
          brightness: true
          schema: "json"
          device: "{{device_info}}"
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"

  battery_sensor:
    #------------------------------------------------------------------------
    # Battery powered sensors
    #    door sensors, window sensors
    #
    #    Other devices (motion, leak, hidden_door, and remote) inherit the
    #    topics defined here and then add a few more.
    #------------------------------------------------------------------------

    # Output state change topic and payload.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off'/'on'
    state_topic: 'insteon/{{address}}/state'
    state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Output low battery topic and payload.  This message is sent
    # whenever the device detects a low battery. Available variables
    # for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   is_low = 0/1
    #   is_low_str = 'off'/'on'
    low_battery_topic: 'insteon/{{address}}/battery'
    low_battery_payload: >-
      { "state" : "{{is_low_str.upper()}}",
        "timestamp" : {{timestamp}} }

    # Output heartbeat topic and payload.  This message is sent
    # every 24 hours. Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   is_heartbeat = 0/1
    #   heartbeat_time = UNIX time float of the last heartbeat
    # Not every battery device currently sends this data.  Currently only
    # the leak sensor is known to provide this data
    heartbeat_topic: 'insteon/{{address}}/heartbeat'
    heartbeat_payload: '{{heartbeat_time}}'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    # this only applies to devices defined as battery_sensor.  Devices that
    # extend this class (motion, hidden_door, leak, and remote) all have their
    # own discovery_entities
    discovery_entities:
      door:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_door"
          name: ""
          stat_t: "{{state_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "door"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      battery:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_battery"
          name: "battery"
          stat_t: "{{low_battery_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "battery"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{low_battery_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      heartbeat:
        component: 'sensor'
        config:
          uniq_id: "{{address}}_heartbeat"
          name: "heartbeat"
          stat_t: "{{heartbeat_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "timestamp"
          device: "{{device_info}}"
          force_update: true
          val_tpl: "{%- raw -%}{{as_datetime(value|float|timestamp_local).isoformat()|string}}{%- endraw -%}"

  motion:
    #------------------------------------------------------------------------
    # Motion sensors
    #------------------------------------------------------------------------

    # Motion sensors will use the state and low battery configuration
    # inputs from battery_sensor and some sensors add an addition
    # dawn/dusk notification which is configured here.

    # Output dawn/dusk change topic and payload.  This message is sent
    # whenever the device light sensor detects dawn or dusk changes.
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   is_dawn = 0/1
    #   is_dawn_str = 'off'/'on'
    #   is_dusk = 0/1
    #   is_dusk_str = 'off'/'on'
    #   state = 'dawn'/'dusk'
    dawn_dusk_topic: 'insteon/{{address}}/dawn'
    dawn_dusk_payload: >-
      { "state" : "{{is_dawn_str.upper()}}",
        "timestamp" : {{timestamp}} }

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      motion:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_motion"
          name: ""
          stat_t: "{{state_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "motion"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      battery:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_battery"
          name: "battery"
          stat_t: "{{low_battery_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "battery"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{low_battery_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      dusk:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_dusk"
          name: "dusk"
          stat_t: "{{dawn_dusk_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "light"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{dawn_dusk_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"

  hidden_door:
    #------------------------------------------------------------------------
    # Hidden Door Sensors
    #------------------------------------------------------------------------

    # Hidden Door Sensors will use the state and low battery configuration
    # inputs from battery_sensor and add battery voltage which is configured
    # here.

    # Output topic and payload.  This message is sent
    # whenever the device is polled and a new voltage, low battery voltage
    # or heart beat interval is obtained from the device.
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   batt_volt = raw insteon voltage level

    battery_voltage_topic: 'insteon/{{address}}/battery_voltage'
    battery_voltage_payload: >-
      { "voltage" : {{batt_volt}},
        "timestamp" : {{timestamp}} }

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      door:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_door"
          name: ""
          stat_t: "{{state_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "door"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      battery:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_battery"
          name: "battery"
          stat_t: "{{low_battery_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "battery"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{low_battery_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      heartbeat:
        component: 'sensor'
        config:
            uniq_id: "{{address}}_heartbeat"
            name: "heartbeat"
            stat_t: "{{heartbeat_topic}}"
            avty_t: "{{availability_topic}}"
            device_class: "timestamp"
            device: "{{device_info}}"
            force_update: true
            val_tpl: "{%- raw -%}{{as_datetime(value|float|timestamp_local).isoformat()|string}}{%- endraw -%}"
      voltage:
        component: 'sensor'
        config:
            uniq_id: "{{address}}_voltage"
            name: "voltage"
            stat_t: "{{battery_voltage_topic}}"
            avty_t: "{{availability_topic}}"
            device_class: "voltage"
            device: "{{device_info}}"
            force_update: true
            json_attr_t: "{{battery_voltage_topic}}"
            json_attr_tpl: "{%- raw -%}
                            {\"timestamp\": {{value_json.timestamp}}}
                            {%- endraw -%}"
            val_tpl: "{% raw %}{{value_json.voltage}}{% endraw %}"

  leak:
    #------------------------------------------------------------------------
    # Leak sensors
    #------------------------------------------------------------------------

    # Leak sensors will use the heartbeat configuration
    # inputs from battery_sensor.
    #
    # Leak sensors will report the dry/wet status and a heartbeat every 24
    # hours. The leak sensors does not support low battery signal like other
    # battery operated devices.

    # Output wet/dry change topic and payload.  This message is sent
    # whenever the device changes state to wet or dry.  This replaces the
    # state_topic that would otherwise be inheritted from battery_sensor.
    # If this is not specified, then state_topic will be used instead.
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   is_wet = 0/1
    #   is_wet_str = 'off'/'on'
    #   is_dry = 0/1
    #   is_dry_str = 'off'/'on'
    #   state = 'wet'/'dry'
    wet_dry_topic: 'insteon/{{address}}/wet'
    wet_dry_payload: >-
      { "state" : "{{is_wet_str.upper()}}",
        "timestamp" : {{timestamp}} }

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      wet:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_wet"
          name: ""
          stat_t: "{{wet_dry_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "moisture"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{wet_dry_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      heartbeat:
        component: 'sensor'
        config:
          uniq_id: "{{address}}_heartbeat"
          name: "heartbeat"
          stat_t: "{{heartbeat_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "timestamp"
          device: "{{device_info}}"
          val_tpl: "{%- raw -%}{{as_datetime(value|float|timestamp_local).isoformat()|string}}{%- endraw -%}"

  remote:
    #------------------------------------------------------------------------
    # Mini remotes
    #------------------------------------------------------------------------

    # Battery powered remotes (usually 4 or 8 buttons).  A message is
    # sent whenever one of the buttons is pressed.
    #
    # The Remote will use the low_battery configuration
    # inputs from battery_sensor.

    # Output state change topic and template.  This message is sent
    # whenever a button is pressed.  Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   button = 1...n  (button number 1-8 depending on configuration)
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   mode = 'normal'/'fast'/'instant'
    #   fast = 0/1
    #   instant = 0/1
    state_topic: 'insteon/{{address}}/state/{{button}}'
    state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Manual mode (holding down a button) is triggered once when the button
    # is held and once when it's released.  Available variables for
    # templating are address (see above), name (see above), button (see
    # above), and:
    #   manual_str = 'up'/'off'/'down'
    #   manual = 1/0/-1
    #   manual_openhab = 2/1/0
    #manual_state_topic: 'insteon/{{address}}/manual_state'
    #manual_state_payload: '{{manual_str.upper()}}'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    #
    # The remote class includes additional topics for the state of the various
    # buttons, these state topics are:
    #   state_topic_N
    #
    # Where N is in the range of [1-8] representing the button group numbers
    # 1-8
    # The default setup below includes state topics for all 8 buttons.  If you
    # have a single button or a 4 button remote, you may want to review the
    # instructions at:
    # https://github.com/TD22057/insteon-mqtt/blob/master/docs/discovery.md
    # for details about how to define a custom class for your devices.
    discovery_entities:
      button1:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_1"
          name: "btn 1"
          stat_t: "{{state_topic_1}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_1}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button2:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_2"
          name: "btn 2"
          stat_t: "{{state_topic_2}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_2}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button3:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_3"
          name: "btn 3"
          stat_t: "{{state_topic_3}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_3}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button4:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_4"
          name: "btn 4"
          stat_t: "{{state_topic_4}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_4}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button5:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_5"
          name: "btn 5"
          stat_t: "{{state_topic_5}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_5}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button6:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_6"
          name: "btn 6"
          stat_t: "{{state_topic_6}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_6}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button7:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_7"
          name: "btn 7"
          stat_t: "{{state_topic_7}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_7}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button8:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_8"
          name: "btn 8"
          stat_t: "{{state_topic_8}}"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{state_topic_8}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      battery:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_battery"
          name: "battery"
          stat_t: "{{low_battery_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "battery"
          device: "{{device_info}}"
          force_update: true
          json_attr_t: "{{low_battery_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"

  smoke_bridge:
    #------------------------------------------------------------------------
    # Smoke Bridge
    #------------------------------------------------------------------------

    # The smoke bridge will broadcast on a variety of groups for various error
    # conditions.

    # Output state change topic and payload.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   type = 'smoke'/'co'/'low_battery'/'error'/'clear'
    smoke_topic: 'insteon/{{address}}/smoke'
    smoke_payload: '{{on_str.upper()}}'

    co_topic: 'insteon/{{address}}/co'
    co_payload: '{{on_str.upper()}}'

    battery_topic: 'insteon/{{address}}/battery'
    battery_payload: '{{on_str.upper()}}'

    error_topic: 'insteon/{{address}}/error'
    error_payload: '{{on_str.upper()}}'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      smoke:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_smoke"
          name: "smoke"
          stat_t: "{{smoke_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "smoke"
          device: "{{device_info}}"
      battery:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_battery"
          name: "battery"
          stat_t: "{{battery_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "battery"
          device: "{{device_info}}"
      co:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_co"
          name: "co"
          stat_t: "{{co_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "gas"
          device: "{{device_info}}"
      error:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_error"
          name: "error"
          stat_t: "{{error_topic}}"
          avty_t: "{{availability_topic}}"
          device_class: "problem"
          device: "{{device_info}}"

  thermostat:
    #------------------------------------------------------------------------
    # Thermostat
    #------------------------------------------------------------------------

    # The thermostat has a lot of available states and commands

    # The current Home Assistant mqtt hvac component lacks humidity which
    # you could add as a seperate sensor.

    # Output state change topic and payload.  Available variables for
    # templating in all cases are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    # The following specific variables only apply to the topics listed
    # directly below
    #   temp_c = temperature in celsius
    #   temp_f = temperature in farenheit
    ambient_temp_topic: 'insteon/{{address}}/ambient_temp'
    ambient_temp_payload: '{"temp_f" : {{temp_f}}, "temp_c" : {{temp_c}}}'
    cool_sp_state_topic: 'insteon/{{address}}/cool_sp_state'
    cool_sp_state_payload: '{"temp_f" : {{temp_f}}, "temp_c" : {{temp_c}}}'
    heat_sp_state_topic: 'insteon/{{address}}/heat_sp_state'
    heat_sp_state_payload: '{"temp_f" : {{temp_f}}, "temp_c" : {{temp_c}}}'
    #   fan_mode = "on", "off"
    #   is_fan_on = 0/1
    fan_state_topic: 'insteon/{{address}}/fan_state'
    fan_state_payload: '{{fan_mode.lower()}}'
    #   mode = 'off', 'auto', 'heat', 'cool', 'program'
    mode_state_topic: 'insteon/{{address}}/mode_state'
    mode_state_payload: '{{mode.lower()}}'
    #   humid = humidity percentage
    humid_state_topic: 'insteon/{{address}}/humid_state'
    humid_state_payload: '{{humid}}'
    #   status = "off", "heating", "cooling"
    #   is_heating = 0/1
    #   is_cooling = 0/1
    status_state_topic: 'insteon/{{address}}/status_state'
    status_state_payload: '{{status.lower()}}'
    # Caution, there is no push update for the hold or energy state.  ie, if
    # you press hold on the physical device, you will not get any notice of
    # this unless you run get_status().  There is also no way to programatically
    # change the hold state or energy state
    #   hold_str = 'off', 'temp'
    #   is_hold = 0/1
    hold_state_topic: 'insteon/{{address}}/hold_state'
    hold_state_payload: '{{hold_str.lower()}}'
    # See caution in hold state above
    #   energy_str = 'off', 'on'
    #   is_energy = 0/1
    energy_state_topic: 'insteon/{{address}}/energ_state'
    energy_state_payload: '{{energy_str.lower()}}'

    # Command Topics
    # Available variables for templating all of these commands are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    #
    # Mode state command.  The output of passing the payload through the
    # template must match the following:
    #   { "cmd" : "auto"/"off"/"heat"/"cool","program" }
    mode_command_topic: 'insteon/{{address}}/mode_command'
    mode_command_payload: '{ "cmd" : "{{value.lower()}}" }'
    # Fan state command.  The output of passing the payload through the
    # template must match the following:
    #   { "cmd" : "auto"/"on" }
    fan_command_topic: 'insteon/{{address}}/fan_command'
    fan_command_payload: '{ "cmd" : "{{value.lower()}}" }'
    # Temp setpoint commands. The payloads should be in the form of {temp_c:
    # float, temp_f: float} Only one unit needs to be present.  If temp_c is
    # present it will be used regardless
    heat_sp_command_topic: 'insteon/{{address}}/heat_sp_command'
    heat_sp_payload: '{ "temp_f" : {{value}} }'
    cool_sp_command_topic: 'insteon/{{address}}/cool_sp_command'
    cool_sp_payload: '{ "temp_f" : {{value}} }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      thermo:
        component: 'climate'
        config:
          uniq_id: "{{address}}_thermo"
          name: "thermo"
          "act_t": "{{status_state_topic}}"
          avty_t: "{{availability_topic}}"
          "curr_temp_t": "{{ambient_temp_topic}}"
          "curr_temp_tpl": "{% raw %}{{value_json.temp_f}}{% endraw %}"
          device: "{{device_info}}"
          "fan_mode_cmd_t": "{{fan_command_topic}}"
          "fan_mode_stat_t": "{{fan_state_topic}}"
          "fan_modes": ["auto", "on"]
          "max_temp": 95
          "min_temp": 45
          "mode_cmd_t": "{{mode_command_topic}}"
          "mode_stat_t": "{{mode_state_topic}}"
          "modes": ["off", "cool", "heat", "auto"]
          "precision": 1.0
          "temp_hi_cmd_t": "{{cool_sp_command_topic}}"
          "temp_hi_stat_t": "{{cool_sp_state_topic}}"
          "temp_hi_stat_tpl": "{% raw %}{{value_json.temp_f}}{% endraw %}"
          "temp_lo_cmd_t": "{{heat_sp_command_topic}}"
          "temp_lo_stat_t": "{{heat_sp_state_topic}}"
          "temp_lo_stat_tpl": "{% raw %}{{value_json.temp_f}}{% endraw %}"
          "temperature_unit": "F"

  fan_linc:
    #------------------------------------------------------------------------
    # Fan Linc
    #------------------------------------------------------------------------

    # A FanLinc is a dimmer switch (Insteon group 1) plus a fan control
    # (group 2).  The dimmer MQTT messages use the dimmer settings
    # above.  The settings here are just for the fan input and output.
    # The settings can be used to turn the fan on and off (and report
    # on/off state changes).
    #
    # NOTE: Both the fan state and fan speed state topics will be
    # published on ANY fan change.  So if you only need one of them, you
    # can put both payloads in a single message and set the other inputs
    # to blank (which will turn off the output).

    # Output fan state change topic and payload.  This message is sent
    # whenever the fan state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   level = 0/1/2/3
    #   level_str = 'off'/'low'/'medium'/'high'
    #   reason = 'device'/'scene'/'command'/'refresh'/'...'
    fan_state_topic: 'insteon/{{address}}/fan/state'
    fan_state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "level" : "{{level_str}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Fan on/off command.  Similar functionality to the cmd_topic but only
    # for turning the device on and off.  If reason is input, is will be
    # passed through to the state_payload.  The output of passing the payload
    # through the template must match the following:
    #   { "cmd" : "on"/"off", ["reason" : "..."] }
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    fan_on_off_topic: 'insteon/{{address}}/fan/set'
    fan_on_off_payload: '{ "cmd" : "{{value.lower()}}" }'

    # Output fan speed state change topic and payload.  Set to empty
    # to turn off.  The same templating variables are available as
    # fan_state_topic agove.
    fan_speed_topic: 'insteon/{{address}}/fan/speed/state'
    fan_speed_payload: '{{level_str}}'

    # Fan speed change command.  Similar functionality to the cmd_topic but
    # only for turning the device on and off.  If reason is input, is will be
    # passed through to the state_payload.  The output of passing the payload
    # through the template must match the following:
    #   { "cmd" : SPEED, ["reason" : "..."] }
    # where
    #   SPEED = 0/1/2/3 (for off, low, medium, high)
    #      or = "off"/"low"/"medium"/"high"
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    fan_speed_set_topic: 'insteon/{{address}}/fan/speed/set'
    fan_speed_set_payload: '{ "cmd" : "{{value.lower()}}" }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      fan:
        component: 'fan'
        config:
          uniq_id: "{{address}}_fan"
          name: "fan"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{fan_on_off_topic}}"
          stat_t: "{{fan_state_topic}}"
          stat_val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
          pct_cmd_t: "{{fan_speed_set_topic}}"
          pct_cmd_tpl: "{% raw %}{% if value < 10 %}off{% elif value < 40 %}low{% elif value < 75 %}medium{% else %}high{% endif %}{% endraw %}"
          pct_stat_t: "{{fan_speed_topic}}"
          pct_val_tpl: "{% raw %}{% if value == 'low' %}33{% elif value == 'medium' %}67{% elif value == 'high' %}100{% else %}0{% endif %}{% endraw %}"
          pr_mode_stat_t: "{{fan_speed_topic}}"
          pr_mode_cmd_t: "{{fan_speed_set_topic}}"
          pr_modes: ["off", "low", "medium", "high"]
          json_attr_t: "{{fan_state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
      light:
        component: 'light'
        config:
          uniq_id: "{{address}}_light"
          name: "light"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{level_topic}}"
          stat_t: "{{state_topic}}"
          brightness: true
          schema: "json"
          device: "{{device_info}}"
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"

  keypad_linc:
    #------------------------------------------------------------------------
    # Keypad Linc
    #------------------------------------------------------------------------

    # A KeypadLinc is an on/off or dimmer switch (Insteon group 1) plus a
    # series of scene control buttons which operate on other groups.  The group
    # 1 behavior will depend on whether the device is an on/off or dimmer.  The
    # 4 or 6 other buttons are controlled like switches - but the only affect
    # is turning on and off the LED on the button since they have no directly
    # attached load.
    #
    # 6 button and 8 button keypads have use the following button numbers:
    #    1 on           1       2
    #  3       4        3       4
    #  5       6        5       6
    #    1 off          7       8

    # On/off switch state change topic and template.  This message is sent
    # whenever one of the on/off buttons is pressed.  It will not be sent for
    # button 1 if it's a dimmer.  Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   button = 1-8
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   mode = 'normal'/'fast'/'instant'
    #   fast = 0/1
    #   instant = 0/1
    #   reason = 'device'/'scene'/'command'/'refresh'/'...'
    btn_state_topic: 'insteon/{{address}}/state/{{button}}'
    btn_state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Dimmer output state change topic and payload for button 1.  This
    # message is sent whenever the device dimmer state changes for any
    # reason.  Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   level_255 = 0-255
    #   level_100 = 0-100
    #   mode = 'normal'/'fast'/'instant'/'ramp'
    #   fast = 0/1
    #   instant = 0/1
    #   reason = 'device'/'scene'/'command'/'refresh'/'...'
    dimmer_state_topic: 'insteon/{{address}}/state/1'
    dimmer_state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "brightness" : {{level_255}},
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Manual mode (holding down a button) is triggered once when the button
    # is held and once when it's released.  Available variables for
    # templating are address (see above), name (see above), and:
    #   manual_str = 'up'/'off'/'down'
    #   manual = 1/0/-1
    #   manual_openhab = 2/1/0
    #manual_state_topic: 'insteon/{{address}}/manual_state'
    #manual_state_payload: '{{manual_str.upper()}}'

    # Input on/off command.  For button 1, this will set the load.  For other
    # buttons, it just set the button LED.  If reason is input, is will be
    # passed through to the state_payload.  The output of passing the payload
    # through the template must match the following:
    #   { "cmd" : 'on'/'off', "button": button,
    #             ["mode" : 'normal'/'fast'/'instant'/'ramp'],
    #             ["fast" : 1/0], ["instant" : 1/0], ["reason" : "..."],
    #             ["transition" : time_in_seconds] }
    # Available variables for templating are:
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    btn_on_off_topic: 'insteon/{{address}}/set/{{button}}'
    btn_on_off_payload: >-
      { "cmd" : {%- if json is defined and json -%}
                  "{{json.state.lower()}}"
                {%- else -%}
                  "{{value.lower()}}"
                {%- endif -%}}

    # Input dimming on/off command for button 1.  Similar functionality to
    # the cmd_topic but only for turning the group 1 on and off and setting
    # the level.  This topic can be the same as the btn_on_off_topic in which
    # case either command format is valid.   If reason is input, is will be
    # passed through to the state_payload.  The output of passing the
    # payload through the template must match the following:
    #   { "cmd" : "on"/"off", ["level" : LEVEL],
    #             ["mode" : 'normal'/'fast'/'instant'/'ramp'],
    #             ["fast" : 1/0], ["instant" : 1/0], ["reason" : "..."],
    #             ["transition" : time_in_seconds] }
    # where:
    #   LEVEL = 0->255 dimmer level
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    dimmer_level_topic: 'insteon/{{address}}/set/1'
    # NOTE: HASS JSON switch doesn't send brightness in some cases
    # when actuated so handle that here in the template code.  The
    # other HASS MQTT options also have this problem.
    # This example will use device's configured default on-level if brightness
    # is not specified.  To use full-brightness instead, add the following to
    # the json.brightness check below:
    #    {% else %}
    #        , "level" : 255
    dimmer_level_payload: >
       { "cmd" : "{{json.state.lower()}}"
         {% if json.brightness is defined %}
             , "level" : {{json.brightness}}
         {% endif %}
         {% if json.transition is defined %}
             , "transition" : {{json.transition}}
         {% endif %} }

    # Scene on/off command.  This triggers the scene broadcast on the switch
    # in the same way clicking the button would.  The inputs are the same as
    # those for the btn_on_off topic and payload.
    btn_scene_topic: 'insteon/{{address}}/scene/{{button}}'
    btn_scene_payload: '{ "cmd" : "{{json.state.lower()}}"
                          {% if json.brightness is defined %}
                              , "level" : {{json.brightness}}
                          {% endif %}
                        }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    #
    # This class includes an additional variable `is_dimmable` which is set
    # to True if btn 1 on the device is dimmable otherwise it returns False
    #
    # The keypad_linc class includes additional topics for the various buttons,
    # these topics are:
    #   btn_state_topic_N
    #   btn_on_off_topic_N
    #   btn_scene_topic_N
    #
    # Where N is in the range of [1-9] representing the button group numbers
    # 1-9
    # The default setup below includes topics for all 8 buttons plus the
    # the detached load setup.  If you have a six button keypad_linc, you may
    # want to review the instructions at:
    # https://github.com/TD22057/insteon-mqtt/blob/master/docs/discovery.md
    # for details about how to define a custom class for your devices.
    discovery_entities:
      button1:
        component: 'light'
        config:
          uniq_id: "{{address}}_1"
          name: "btn 1"
          avty_t: "{{availability_topic}}"
          device: "{{device_info}}"
          brightness: "{{is_dimmable|lower()}}"
          cmd_t: "{%- if is_dimmable -%}
                    {{dimmer_level_topic}}
                  {%- else -%}
                    {{btn_on_off_topic_1}}
                  {%- endif -%}"
          schema: "json"
          stat_t: "{%- if is_dimmable -%}
                     {{dimmer_state_topic}}
                   {%- else -%}
                     {{btn_state_topic_1}}
                   {%- endif -%}"
          json_attr_t: "{%- if is_dimmable -%}
                          {{dimmer_state_topic}}
                        {%- else -%}
                          {{btn_state_topic_1}}
                        {%- endif -%}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
      button2:
        component: 'switch'
        config:
          uniq_id: "{{address}}_2"
          name: "btn 2"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_2}}"
          stat_t: "{{btn_state_topic_2}}"
          json_attr_t: "{{btn_state_topic_2}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button3:
        component: 'switch'
        config:
          uniq_id: "{{address}}_3"
          name: "btn 3"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_3}}"
          stat_t: "{{btn_state_topic_3}}"
          json_attr_t: "{{btn_state_topic_3}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button4:
        component: 'switch'
        config:
          uniq_id: "{{address}}_4"
          name: "btn 4"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_4}}"
          stat_t: "{{btn_state_topic_4}}"
          json_attr_t: "{{btn_state_topic_4}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button5:
        component: 'switch'
        config:
          uniq_id: "{{address}}_5"
          name: "btn 5"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_5}}"
          stat_t: "{{btn_state_topic_5}}"
          json_attr_t: "{{btn_state_topic_5}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button6:
        component: 'switch'
        config:
          uniq_id: "{{address}}_6"
          name: "btn 6"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_6}}"
          stat_t: "{{btn_state_topic_6}}"
          json_attr_t: "{{btn_state_topic_6}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button7:
        component: 'switch'
        config:
          uniq_id: "{{address}}_7"
          name: "btn 7"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_7}}"
          stat_t: "{{btn_state_topic_7}}"
          json_attr_t: "{{btn_state_topic_7}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button8:
        component: 'switch'
        config:
          uniq_id: "{{address}}_8"
          name: "btn 8"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_8}}"
          stat_t: "{{btn_state_topic_8}}"
          json_attr_t: "{{btn_state_topic_8}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      button9:
        component: 'switch'
        config:
          uniq_id: "{{address}}_9"
          name: "btn 9"
          device: "{{device_info}}"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{btn_on_off_topic_9}}"
          stat_t: "{{btn_state_topic_9}}"
          json_attr_t: "{{btn_state_topic_9}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"

  io_linc:
    #------------------------------------------------------------------------
    # IO Linc relay controllers
    #------------------------------------------------------------------------

    # The IOLinc is both a switch (momentary or latching on/off) and a sensor
    # that can be on or off.  If you configure the IOLinc to be momentary, then
    # the on command will trigger it for the duration that is configured and
    # the off command is ignored.  If it's configured as a latching switch,
    # then the on and off commands work like a normal switch.  The set-flags
    # command line command can be used to change the settings.
    #
    # NOTE: the on/off payload forces the relay to on or off ignoring any special
    # requirements associated with the Momentary_A,B,C functions or the
    # relay_linked flag.  It can be used without issue for latching setups, but
    # if you want to use this accurately for Momentary_A,B,C setups, you may need
    # to have some logic upstream from this command to check the state of sensor
    # and or the command to determine if setting the relay on or off is
    # appropriate .

    # Output state change topic and template.  This message is sent whenever
    # the device sensor or device relay state changes.  Available variables for
    # templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   sensor_on = 0/1
    #   relay_on = 0/1
    #   sensor_on_str = 'off'/'on'
    #   relay_on_str = 'off'/'on'
    state_topic: 'insteon/{{address}}/state'
    state_payload: >-
      { "sensor" : "{{sensor_on_str.upper()}}",
        "relay" : "{{relay_on_str.upper()}}",
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Output relay state change topic and template.  This message is sent
    # whenever the device relay state changes.  Available variables for
    # templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   relay_on = 0/1
    #   relay_on_str = 'off'/'on'
    relay_state_topic: 'insteon/{{address}}/relay'
    relay_state_payload: '{{relay_on_str.upper()}}'

    # Output sensor state change topic and template.  This message is sent
    # whenever the device sensor state changes.  Available variables for
    # templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   sensor_on = 0/1
    #   sensor_on = 'off'/'on'
    sensor_state_topic: 'insteon/{{address}}/sensor'
    sensor_state_payload: '{{sensor_on_str.upper()}}'

    # Input on/off command.  This forces the relay on/off and ignores the
    # momentary-A,B,C setting.  Use this to force the relay to respond.
    # If momentary mode is active, it will turn off after the delay.  The
    # output of passing the payload through the template must match the
    # following:
    #   { "cmd" : 'on'/'off' }
    # Available variables for templating are:
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    on_off_topic: 'insteon/{{address}}/set'
    on_off_payload: '{ "cmd" : "{{value.lower()}}" }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    discovery_entities:
      relay:
        component: 'switch'
        config:
          uniq_id: "{{address}}_relay"
          name: "relay"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic}}"
          stat_t: "{{relay_state_topic}}"
          device: "{{device_info}}"
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
      sensor:
        component: 'binary_sensor'
        config:
          uniq_id: "{{address}}_sensor"
          name: "sensor"
          avty_t: "{{availability_topic}}"
          stat_t: "{{sensor_state_topic}}"
          device: "{{device_info}}"
          json_attr_t: "{{state_topic}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"

  outlet:
    #------------------------------------------------------------------------
    # On/off outlets
    #------------------------------------------------------------------------

    # On/Off outlets.  Non-dimming in wall outlet modules is two independent
    # switchs (top and bottom outlet.  The top outlet is button 1, the bottom
    # outlet is button 2.

    # Output state change topic and template.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   button = 1 (top outlet) or 2 (bottom outlet)
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   mode = 'normal'/'fast'/'instant'
    #   fast = 0/1
    #   instant = 0/1
    #   reason = 'device'/'scene'/'command'/'refresh'/'...'
    state_topic: 'insteon/{{address}}/state/{{button}}'
    state_payload: >-
      { "state" : "{{on_str.upper()}}",
        "mode" : "{{mode.upper()}}",
        "timestamp" : {{timestamp}},
        "reason" : "{{reason}}" }

    # Input on/off command.  Similar functionality to the cmd_topic but only
    # for turning the device on and off.  If reason is input, is will be
    # passed through to the state_payload.  The output of passing the payload
    # through the template must match the following:
    #   { "cmd" : 'on'/'off', "button": button,
    #             ["mode" : 'normal'/'fast'/'instant'],
    #             ["fast" : 1/0], ["instant" : 1/0], ["reason" : "..."] }
    # Available variables for templating are:
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    on_off_topic: 'insteon/{{address}}/set/{{button}}'
    on_off_payload: '{ "cmd" : "{{value.lower()}}" }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    #
    # The outlet class includes additional topics for the two outlets,
    # these topics are:
    #   btn_state_topic_N
    #   btn_on_off_topic_N
    #
    # Where N is in the range of [1-2] representing the outlet group numbers
    # 1-2
    # The default setup below includes topics for both outlets. If you have a
    # single outlet model, you may want to review the instructions at:
    # https://github.com/TD22057/insteon-mqtt/blob/master/docs/discovery.md
    # for details about how to define a custom class for your devices.
    discovery_entities:
      top:
        component: 'switch'
        config:
          uniq_id: "{{address}}_1"
          name: "top"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic_1}}"
          stat_t: "{{state_topic_1}}"
          device: "{{device_info}}"
          json_attr_t: "{{state_topic_1}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"
      bottom:
        component: 'switch'
        config:
          uniq_id: "{{address}}_2"
          name: "bottom"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic_2}}"
          stat_t: "{{state_topic_2}}"
          device: "{{device_info}}"
          json_attr_tpl: "{%- raw -%}
                          {\"timestamp\": {{value_json.timestamp}}, \"mode\": \"{{value_json.mode}}\", \"reason\": \"{{value_json.reason}}\"}
                          {%- endraw -%}"
          val_tpl: "{% raw %}{{value_json.state}}{% endraw %}"

  ezio4o:
    #------------------------------------------------------------------------
    # EZIO4O 4 relay output module
    #------------------------------------------------------------------------
    # EZIO4O is a 4 relay output wall plug module from Smartenit.
    # Each relay has a normally open and a normally closed contact.
    # Device relay 1 to 4 correspond to topics button 1 to 4.

    # Output state change topic and template.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   timestamp = the current timestamp
    #   name = 'device name'
    #   button = 1 to 4 (relay number)
    #   on = 0/1
    #   on_str = 'off'/'on'
    #   mode = 'normal'/'fast'/'instant'
    #   fast = 0/1
    #   instant = 0/1
    #   reason = 'device'/'scene'/'command'/'refresh'/'...'
    state_topic: "insteon/{{address}}/state/{{button}}"
    state_payload: "{{on_str.upper()}}"

    # Input on/off command.  Similar functionality to the cmd_topic but only
    # for turning the device on and off.  If reason is input, is will be
    # passed through to the state_payload.  The output of passing the payload
    # through the template must match the following:
    #   { "cmd" : 'on'/'off', "button": button,
    #             ["mode" : 'normal'/'fast'/'instant'],
    #             ["fast" : 1/0], ["instant" : 1/0], ["reason" : "..."] }
    # Available variables for templating are:
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    on_off_topic: "insteon/{{address}}/set/{{button}}"
    on_off_payload: '{ "cmd" : "{{value.lower()}}" }'

    # Discovery Entities - Used as part of HomeAssistant MQTT Discovery
    #
    # The ezio4 class includes additional topics for the various relays,
    # these topics are:
    #   btn_state_topic_N
    #   btn_on_off_topic_N
    #
    # Where N is in the range of [1-4] representing the relay group numbers
    # 1-4
    # The default setup below includes topics for all relays. You may want to
    # review the instructions at:
    # https://github.com/TD22057/insteon-mqtt/blob/master/docs/discovery.md
    # for details about how to define a custom class for your devices.
    discovery_entities:
      relay1:
        component: 'switch'
        config:
          uniq_id: "{{address}}_1"
          name: "relay 1"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic_1}}"
          stat_t: "{{state_topic_1}}"
          device: "{{device_info}}"
      relay2:
        component: 'switch'
        config:
          uniq_id: "{{address}}_2"
          name: "relay 2"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic_2}}"
          stat_t: "{{state_topic_2}}"
          device: "{{device_info}}"
      relay3:
        component: 'switch'
        config:
          uniq_id: "{{address}}_3"
          name: "relay 3"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic_3}}"
          stat_t: "{{state_topic_3}}"
          device: "{{device_info}}"
      relay4:
        component: 'switch'
        config:
          uniq_id: "{{address}}_4"
          name: "relay 4"
          avty_t: "{{availability_topic}}"
          cmd_t: "{{on_off_topic_4}}"
          stat_t: "{{state_topic_4}}"
          device: "{{device_info}}"

#----------------------------------------------------------------
